/**
 * CromIam
 * Cromwell's Bouncer
 *
 * OpenAPI spec version: 
 * Contact: dsde@broadinstitute.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package woodard.api

import java.text.SimpleDateFormat

import woodard.model.StatusResponse
import woodard.model.VersionResponse
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class EngineApi(
  val defBasePath: String = "https://localhost",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new EngineApiAsyncHelper(client, config)

  /**
   * Returns the current health status of any monitored subsystems
   * 
   *
   * @param version API Version 
   * @return StatusResponse
   */
  def engineVersionStatusGet(version: String): Option[StatusResponse] = {
    val await = Try(Await.result(engineVersionStatusGetAsync(version), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Returns the current health status of any monitored subsystems asynchronously
   * 
   *
   * @param version API Version 
   * @return Future(StatusResponse)
   */
  def engineVersionStatusGetAsync(version: String): Future[StatusResponse] = {
      helper.engineVersionStatusGet(version)
  }

  /**
   * Returns the version of the Cromwell Engine
   * 
   *
   * @param version API Version 
   * @return VersionResponse
   */
  def engineVersionVersionGet(version: String): Option[VersionResponse] = {
    val await = Try(Await.result(engineVersionVersionGetAsync(version), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Returns the version of the Cromwell Engine asynchronously
   * 
   *
   * @param version API Version 
   * @return Future(VersionResponse)
   */
  def engineVersionVersionGetAsync(version: String): Future[VersionResponse] = {
      helper.engineVersionVersionGet(version)
  }

}

class EngineApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def engineVersionStatusGet(version: String)(implicit reader: ClientResponseReader[StatusResponse]): Future[StatusResponse] = {
    // create path and map variables
    val path = (addFmt("/engine/{version}/status")
      replaceAll("\\{" + "version" + "\\}", version.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (version == null) throw new Exception("Missing required parameter 'version' when calling EngineApi->engineVersionStatusGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def engineVersionVersionGet(version: String)(implicit reader: ClientResponseReader[VersionResponse]): Future[VersionResponse] = {
    // create path and map variables
    val path = (addFmt("/engine/{version}/version")
      replaceAll("\\{" + "version" + "\\}", version.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (version == null) throw new Exception("Missing required parameter 'version' when calling EngineApi->engineVersionVersionGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
